
------------------------------------------------------------------------

COMO ARMAR LA BASE DE DATOS Y CARGARLE DATOS
1) Crear la base de datos con nombre db_pwa
2) En el archivo .env cambiar la variable DB_DATABASE  al nombre de la base de datos.
3) En la consola ejecutar el comando php artisan migrate
4) Cargar los datos de prueba usando los seeders con los siguientes comandos
     a) php artisan db:seed --class=EscuelasTableSeeder
     b) php artisan db:seed --class=PaisesTableSeeder
     c) php artisan db:seed --class=EstadosTableSeeder
     d) php artisan db:seed --class=RolesTableSeeder
     e) php artisan db:seed --class=UsuariosTableSeeder
     f) php artisan db:seed --class=CompetidoresTableSeeder
     g) php artisan db:seed --class=CompetenciasTableSeeder
     h) php artisan db:seed --class=PoomsaeTableSeeder


** COMO RESETEAR LA BASE DE DATOS **
1) Ejecutar el comando php artisan migrate:refresh
2) Ejecutar los comandos de los seeders (en el mismo orden que arribita)

------------------------------------------------------------------------
Active del navbar

Los 'a' del navbar tienen dentro de la clase lo siguiente:
{{ request()->is('imagenesRandom') ? 'active' : '' }}
La función request()->is() es un método de Laravel que se utiliza para comparar 
la URL actual de la solicitud con un patrón específico, entonces si la URL actual es imagenesRandom, se le asignara 
al 'a' la clase active, sino no.


Imagen del header

Al utilizar una imagen en una plantilla Blade, se puede usar la función asset() para generar la URL completa 
de la imagen de forma dinámica

------------------------------------------------------------------------
@include
En Laravel, al usar la función @include('includes.footer') en Blade, estás indicando que se incluya el archivo footer.blade.php en la carpeta includes.
Esto se debe a que Laravel busca automáticamente el archivo en la carpeta resources/views, que es la ubicación predeterminada para las vistas de la aplicación.
La convención de nomenclatura utilizada es 'nombreCarpeta.nombreArchivo', lo que significa que buscará el archivo footer.blade.php dentro de resources/views/includes.
Sin embargo, si deseas especificar una ubicación diferente, puedes proporcionar la ruta completa en lugar de utilizar la convención predeterminada.

La convención de nomenclatura en Laravel sigue el formato 'nombreCarpeta.nombreArchivo'.
La primera parte, nombreCarpeta, se refiere al nombre de la carpeta relativa a la carpeta resources/views.
La segunda parte, nombreArchivo, se refiere al nombre del archivo que deseas incluir.

Entonces, si tienes una estructura de carpetas como resources/views/texto/footer.blade.php, al utilizar @include('texto.footer') se incluirá el archivo correctamente.
Sin embargo, si el archivo footer.blade.php se encuentra en una ubicación diferente, deberás proporcionar la ruta completa en lugar de utilizar la convención de nomenclatura.

En resumen, la convención 'nombreCarpeta.nombreArchivo' en Laravel se utiliza para organizar las vistas en subcarpetas dentro de resources/views y para especificar la ruta al incluir archivos con @include.

------------------------------------------------------------------------------------------------------------------------------------------------

MODELOS

php artisan make:model NombreModelo

Laravel generará automáticamente un archivo para tu modelo en el directorio 'app' de tu proyecto como NombreModelo.php.

Laravel proporciona una serie de métodos y funcionalidades predefinidas
en el modelo base (Illuminate\Database\Eloquent\Model) que tu modelo Usuario hereda automáticamente. Estos métodos incluyen:

1. Creación y guardado de registros:

* create(array $attributes): Crea un nuevo registro en la base de datos con los atributos proporcionados.
* save(array $options = []): Guarda el modelo en la base de datos.
* fill(array $attributes): Rellena los atributos del modelo con los valores proporcionados.

2. Actualización y eliminación de registros:

* update(array $attributes = [], array $options = []): Actualiza uno o varios registros con los atributos proporcionados.
* delete(): bool|null: Elimina el registro de la base de datos.
* destroy(mixed $ids): Elimina uno o varios registros por sus claves primarias.

3. Consultas y recuperación de registros:

* find(mixed $id, array $columns = ['*']): Recupera un registro por su clave primaria.
* findOrFail(mixed $id, array $columns = ['*']): Recupera un registro por su clave primaria o lanza una excepción si no se encuentra.
* where(string|array|\Closure $column, mixed $operator = null, mixed $value = null, string $boolean = 'and'): Agrega una cláusula WHERE a la consulta.
* get(array|string $columns = ['*']): Recupera todos los registros que coinciden con la consulta.
* first(array|string $columns = ['*']): Recupera el primer registro que coincide con la consulta.
* count(): Obtiene el número de registros que coinciden con la consulta.
* paginate(int $perPage = 15, array $columns = ['*'], string $pageName = 'page', int|null $page = null): Pagina los resultados de la consulta.

4. Relaciones con otros modelos:

* belongsTo(string $related, string|null $foreignKey = null, string|null $ownerKey = null, string $relation = null): Define una relación de pertenencia a otro modelo.
* hasMany(string $related, string|null $foreignKey = null, string|null $localKey = null): Define una relación de "tiene muchos" con otro modelo.
* hasOne(string $related, string|null $foreignKey = null, string|null $localKey = null): Define una relación de "tiene uno" con otro modelo.

Entre otros métodos para relaciones como belongsToMany, morphTo, morphMany, etc.

------------------------------------------------------------------------------------------------------------------------------------------------

MIGRACIONES

Crear migracion: php artisan make:migration create_nombreTabla_table
Correr migraciones: php artisan migrate 

Las migraciones se ejecutan de manera alfabetica, es importante saberlo para cuando una tabla tiene clave foranea que esta se cree 
despues de la tabla donde esta la clave.
------------------------------------------------------------------------------------------------------------------------------------------------

CONTROLADORES

php artisan make:controller NombreDelControlador

Esto creará un archivo en la carpeta "app/Http/Controllers"
con el nombre que especificaste, seguido de "Controller.php" (por ejemplo, "NombreDelControladorController.php").
Abre el archivo recién creado y encontrarás una clase llamada "NombreDelControladorController" que extiende la clase base "Controller".

Una vez que hayas definido tus métodos de controlador, puedes utilizarlos en tus rutas para 
manejar las solicitudes HTTP entrantes y realizar las acciones necesarias en tu modelo.

Laravel proporciona varios métodos predefinidos en el controlador que puedes utilizar para realizar acciones comunes.
Algunos de los métodos más utilizados son:

* index(): Este método se utiliza para mostrar una lista de registros. 
    Por lo general, se utiliza para la página principal o de índice de una entidad.
    Puedes recuperar los registros necesarios del modelo y pasarlos a una vista para su visualización.

* create(): Este método muestra el formulario para crear un nuevo registro.
    Puedes mostrar una vista   que contenga el formulario de creación.

* store(Request $request): Este método se utiliza para almacenar un nuevo registro en la base de datos.
    Recibe la instancia de la clase Request que contiene los datos enviados desde el formulario de creación.
    Puedes crear una nueva instancia del modelo, asignar los valores del formulario y guardar el registro en la base de datos.

* show($id): Este método muestra los detalles de un registro específico. 
    Generalmente se utiliza para mostrar una vista con información detallada sobre un registro en particular,
    identificado por su $id.

* edit($id): Este método muestra el formulario para editar un registro existente.
    Se utiliza para mostrar una vista que contiene el formulario de edición, prellenando los campos con los valores actuales
    del registro identificado por su $id.

* update(Request $request, $id): Este método se utiliza para actualizar un registro existente en la base de datos.
    Recibe la instancia de la clase Request que contiene los datos enviados desde el formulario de edición, así como
    el $id del registro que se va a actualizar. Puedes recuperar el registro existente, actualizar sus valores y guardar
    los cambios en la base de datos.

* destroy($id): Este método se utiliza para eliminar un registro de la base de datos.
    Recibe el $id del registro que se va a eliminar. Puedes encontrar y eliminar el registro correspondiente de la base de datos.

------------------------------------------------------------------------------------------------------------------------------------------------

SEEDERS

Un seeder en Laravel es una clase que se utiliza para poblar la base de datos con datos predefinidos
Toma los datos de un array o json y con un foreach va creando los objetos.

Se debe agregar los modelos que se usen -> use App\Models\Pais;

Si se utiliza un JSON es necesario agregar lo siguiente -> use Illuminate\Support\Facades\File;

Crear seeder: php artisan make:seeder NombreTableSeeder
Ejecutar seeder: php artisan db:seed --class=NombreTableSeeder 

---- COMO CARGAR LOS DATOS -----
1) php artisan db:seed --class=PaisesTableSeeder
2) php artisan db:seed --class=EstadosTableSeeder


1) php artisan db:seed --class=RolesTableSeeder
2) php artisan db:seed --class=UsuariosTableSeeder


) php artisan db:seed --class=CompetidoresTableSeeder

Importante cargar primero paises porque estado tiene la clave foranea idPais


Link del cual hice el registro y el login

https://codeanddeploy.com/blog/laravel/laravel-8-authentication-login-and-registration-with-username-or-email#Hr6YnMWTWSm8nd46fz6EJdsWW

vitacora xd

empece haciendo el login y el registro con variables al español, incluido el modelo usuarios, cuestion que al terminar me generaba 
problemas auth, por lo cual de todo este embrollo llegue a la conclusion de que el campo password es !necesario!, se puede cambiar
aplicando una funcion, pero para no tener que tocar de mas lo deje asi, asi tambien el controlador usuarios quedara para
que el administrador pueda gestionar, tuve que crear otro modelo a parte de Usuarios (ver si quedo acorde a su controlador y 
ver de hacer uso de Users (falta la manipulacion de roles)), el otro modelo es user, ahi estan los campos en español excepto por
password

cree otra migracion que crea la tabla Users, es identico a la tabla usuarios, pero el idUsuario ahora es solo id()

arme las vistas del link de arriba y las comente para saber cuales son plantillas y cuales son las paginas principales
habria que ver de copiar las formas y mandarlas a nuestro proyecto ( 
        views/auth (registro y login), 
        views/layouts(estan las plantillas de registro/login y home2, ""habria que copiarse los botones de login del navbar"")
        views/home2(esta el home de registro, cambiar a nuestro home una vez pasado los botones de login del navbar que trae)   
    )

copie en public/asset otro bootstrap, habria que volarlos una vez se haga lo de arriba, pasar los styles sueltos a archivos .class

cree la carpeta /lang/es que es donde se deberia pasar a español las validaciones, que tambien nos va a servir para cargar Competidores 

los controladores estan comentados, en homeController se puede cambiar esa ruta home2.index que seria el home

en web.php estan establecidas las rutas por grupo, en las cuales estan las paginas habilitadas para los registrados y los no.
se podria ver de hacer una sentencia que verifique si el usuario posee roles que le permita visitar paginas particulares

------------------------------

Que son esas carpetas en resources/views?

la carpeta "auth" contiene las secciones login y registro, estos hacen uso de la 
plantilla auth-master que estan en la carpeta layouts

la carpeta "auth/partials" contiene un estilo de banner que figura debajo de los submits

la carpeta "home" contiene la seccion home, este hace uso de la plantilla app-master

la carpeta "layouts" contiene las plantillas que van a usar las secciones que vayamos creando, estos ya traen cargadas
las librerias, se podrian hacer plantillas para diferentes usos, como por ej, en caso de que se use otra librerias
podriamos copiar app-master y sacar las librerias que no necesitamos y poner las que si

la carpeta "layouts/partials" contiene el footer y navbar, ademas de un include que devuelve los estados 
y/o validaciones de registro, se podria usar para las otras secciones


----------------------------------------------------------------------------------------------------------------------------------
TRAER REGISTROS DE LA BD

1)se crea una ruta: Route::get('/competidores', [CompetidorController::class, 'index']);
esta ruta solo carga la vista de la tabla, ahi mismo se carga el js con el jquery de datatable.
2)En el js se inicializa un datatable con una peticion ajax donde busca los datosen la url: "/competidores/data"(ruta que se encuentra en web.php),
esa ruta invoca el metodo obtenerRegistros que se encuentra en CompetidorController, 
3)El Metodo obtenerRegistros obtiene registros utilizando la funcion select de Eloquent ORM para seleccionar las columnas necesarias de la tabla "competidores". 
Luego se utiliza la función "join" para unir la tabla "paises" basándose en la columna "idPais".
Finalmente, se utiliza la función "get" de Eloquent ORM para recuperar todos los registros afectados por la consulta 
y se devuelve un objeto JSON que contiene los registros de "competidores" junto con el nombre del país correspondiente utilizando la sintaxis "nombre_pais" como un alias para la columna "nombrePais"

4)Una vez obtenido el objeto JSON con los registros en la arreglo COLUMNS de datatable se especifican los campos que se van a necesitar para llenar los campos de la tabla
los nombres de los campos van a ser los que se encuentren en el JSON obtenido. el campo { data: "nombre_pais" }, es un campo del join con las tablas competidores y paises.

5)El datatable hace su magia y pobla la tabla con los datos en la vista.

